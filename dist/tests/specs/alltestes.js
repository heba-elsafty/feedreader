$((describe("RSS Feeds",function(){it("are defined",function(){expect(allFeeds).toBeDefined(),expect(allFeeds.length).not.toBe(0)}),it("URL defined",function(){for(feed of allFeeds)expect(feed.url).toBeDefined(),expect(feed.url.length).not.toBe(0)}),it("A name defined",function(){for(feed of allFeeds)expect(feed.name).toBeDefined(),expect(feed.name.length).not.toBe(0)})}),describe("The menu",function(){it("Is hidden",function(){const e=document.querySelector("body");expect(e.classList.contains("menu-hidden")).toBe(!0)}),it("Toggle on and off",function(){const e=document.querySelector("body"),n=document.querySelector(".menu-icon-link");n.click(),expect(e.classList.contains("menu-hidden")).toBe(!1),n.click(),expect(e.classList.contains("menu-hidden")).toBe(!0)})}),describe("Initial Entries",function(){beforeEach(function(e){loadFeed(0,e)}),it("completes work",function(){const e=document.querySelector(".feed");expect(e.children.length>0).toBe(!0)})}),void describe("New Feed Selection",function(){const e=document.querySelector(".feed"),n=[];beforeEach(function(t){loadFeed(0),Array.from(e.children).forEach(function(e){n.push(e.innerText)}),loadFeed(1,t)}),it("Content Changes",function(){Array.from(e.children).forEach(function(e,t){console.log(e.innerText,n[t],e.innerText===n[t]),expect(e.innerText===n[t]).toBe(!1)})})})));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImphc21pbmUvc3BlYy9mZWVkcmVhZGVyLmpzIl0sIm5hbWVzIjpbIiQiLCJkZXNjcmliZSIsIml0IiwiZXhwZWN0IiwiYWxsRmVlZHMiLCJ0b0JlRGVmaW5lZCIsImxlbmd0aCIsIm5vdCIsInRvQmUiLCJmZWVkIiwidXJsIiwibmFtZSIsImJvZHkiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsIm1lbnUiLCJjbGljayIsImJlZm9yZUVhY2giLCJkb25lIiwibG9hZEZlZWQiLCJjaGlsZHJlbiIsImZpcnN0RmVlZCIsIkFycmF5IiwiZnJvbSIsImZvckVhY2giLCJlbnRyeSIsInB1c2giLCJpbm5lclRleHQiLCJpbmRleCIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiJBQVVBQSxHQUtBQyxTQUFBLFlBQUEsV0FRQUMsR0FBQSxjQUFBLFdBQ0FDLE9BQUFDLFVBQUFDLGNBQ0FGLE9BQUFDLFNBQUFFLFFBQUFDLElBQUFDLEtBQUEsS0FRQU4sR0FBQSxjQUFBLFdBQ0EsSUFBQU8sUUFBQUwsU0FDQUQsT0FBQU0sS0FBQUMsS0FBQUwsY0FDQUYsT0FBQU0sS0FBQUMsSUFBQUosUUFBQUMsSUFBQUMsS0FBQSxLQVFBTixHQUFBLGlCQUFBLFdBQ0EsSUFBQU8sUUFBQUwsU0FDQUQsT0FBQU0sS0FBQUUsTUFBQU4sY0FDQUYsT0FBQU0sS0FBQUUsS0FBQUwsUUFBQUMsSUFBQUMsS0FBQSxPQVFBUCxTQUFBLFdBQUEsV0FNQUMsR0FBQSxZQUFBLFdBQ0EsTUFBQVUsRUFBQUMsU0FBQUMsY0FBQSxRQUNBWCxPQUFBUyxFQUFBRyxVQUFBQyxTQUFBLGdCQUFBUixNQUFBLEtBUUFOLEdBQUEsb0JBQUEsV0FDQSxNQUFBVSxFQUFBQyxTQUFBQyxjQUFBLFFBQ0FHLEVBQUFKLFNBQUFDLGNBQUEsbUJBRUFHLEVBQUFDLFFBQ0FmLE9BQUFTLEVBQUFHLFVBQUFDLFNBQUEsZ0JBQUFSLE1BQUEsR0FFQVMsRUFBQUMsUUFDQWYsT0FBQVMsRUFBQUcsVUFBQUMsU0FBQSxnQkFBQVIsTUFBQSxPQUtBUCxTQUFBLGtCQUFBLFdBT0FrQixXQUFBLFNBQUFDLEdBQ0FDLFNBQUEsRUFBQUQsS0FFQWxCLEdBQUEsaUJBQUEsV0FDQSxNQUFBTyxFQUFBSSxTQUFBQyxjQUFBLFNBQ0FYLE9BQUFNLEVBQUFhLFNBQUFoQixPQUFBLEdBQUFFLE1BQUEsWUFLQVAsU0FBQSxxQkFBQSxXQUtBLE1BQUFRLEVBQUFJLFNBQUFDLGNBQUEsU0FDQVMsRUFBQSxHQUNBSixXQUFBLFNBQUFDLEdBQ0FDLFNBQUEsR0FDQUcsTUFBQUMsS0FBQWhCLEVBQUFhLFVBQUFJLFFBQUEsU0FBQUMsR0FDQUosRUFBQUssS0FBQUQsRUFBQUUsYUFFQVIsU0FBQSxFQUFBRCxLQUdBbEIsR0FBQSxrQkFBQSxXQUVBc0IsTUFBQUMsS0FBQWhCLEVBQUFhLFVBQUFJLFFBQUEsU0FBQUMsRUFBQUcsR0FDQUMsUUFBQUMsSUFBQUwsRUFBQUUsVUFBQU4sRUFBQU8sR0FBQUgsRUFBQUUsWUFBQU4sRUFBQU8sSUFDQTNCLE9BQUF3QixFQUFBRSxZQUFBTixFQUFBTyxJQUFBdEIsTUFBQSIsImZpbGUiOiJhbGx0ZXN0ZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBmZWVkcmVhZGVyLmpzXG4gKlxuICogVGhpcyBpcyB0aGUgc3BlYyBmaWxlIHRoYXQgSmFzbWluZSB3aWxsIHJlYWQgYW5kIGNvbnRhaW5zXG4gKiBhbGwgb2YgdGhlIHRlc3RzIHRoYXQgd2lsbCBiZSBydW4gYWdhaW5zdCB5b3VyIGFwcGxpY2F0aW9uLlxuICovXG5cbi8qIFdlJ3JlIHBsYWNpbmcgYWxsIG9mIG91ciB0ZXN0cyB3aXRoaW4gdGhlICQoKSBmdW5jdGlvbixcbiAqIHNpbmNlIHNvbWUgb2YgdGhlc2UgdGVzdHMgbWF5IHJlcXVpcmUgRE9NIGVsZW1lbnRzLiBXZSB3YW50XG4gKiB0byBlbnN1cmUgdGhleSBkb24ndCBydW4gdW50aWwgdGhlIERPTSBpcyByZWFkeS5cbiAqL1xuJChmdW5jdGlvbigpIHtcblx0LyogVGhpcyBpcyBvdXIgZmlyc3QgdGVzdCBzdWl0ZSAtIGEgdGVzdCBzdWl0ZSBqdXN0IGNvbnRhaW5zXG5cdCogYSByZWxhdGVkIHNldCBvZiB0ZXN0cy4gVGhpcyBzdWl0ZSBpcyBhbGwgYWJvdXQgdGhlIFJTU1xuXHQqIGZlZWRzIGRlZmluaXRpb25zLCB0aGUgYWxsRmVlZHMgdmFyaWFibGUgaW4gb3VyIGFwcGxpY2F0aW9uLlxuXHQqL1xuXHRkZXNjcmliZSgnUlNTIEZlZWRzJywgZnVuY3Rpb24oKSB7XG5cdFx0LyogVGhpcyBpcyBvdXIgZmlyc3QgdGVzdCAtIGl0IHRlc3RzIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZVxuXHRcdCAqIGFsbEZlZWRzIHZhcmlhYmxlIGhhcyBiZWVuIGRlZmluZWQgYW5kIHRoYXQgaXQgaXMgbm90XG5cdFx0ICogZW1wdHkuIEV4cGVyaW1lbnQgd2l0aCB0aGlzIGJlZm9yZSB5b3UgZ2V0IHN0YXJ0ZWQgb25cblx0XHQgKiB0aGUgcmVzdCBvZiB0aGlzIHByb2plY3QuIFdoYXQgaGFwcGVucyB3aGVuIHlvdSBjaGFuZ2Vcblx0XHQgKiBhbGxGZWVkcyBpbiBhcHAuanMgdG8gYmUgYW4gZW1wdHkgYXJyYXkgYW5kIHJlZnJlc2ggdGhlXG5cdFx0ICogcGFnZT9cblx0XHQgKi9cblx0XHRpdCgnYXJlIGRlZmluZWQnLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZXhwZWN0KGFsbEZlZWRzKS50b0JlRGVmaW5lZCgpO1xuXHRcdFx0XHRleHBlY3QoYWxsRmVlZHMubGVuZ3RoKS5ub3QudG9CZSgwKTtcblx0XHR9KTtcblxuXG5cdFx0LyogVE9ETzogV3JpdGUgYSB0ZXN0IHRoYXQgbG9vcHMgdGhyb3VnaCBlYWNoIGZlZWRcblx0XHQgKiBpbiB0aGUgYWxsRmVlZHMgb2JqZWN0IGFuZCBlbnN1cmVzIGl0IGhhcyBhIFVSTCBkZWZpbmVkXG5cdFx0ICogYW5kIHRoYXQgdGhlIFVSTCBpcyBub3QgZW1wdHkuXG5cdFx0ICovXG5cdFx0aXQoJ1VSTCBkZWZpbmVkJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRmb3IoZmVlZCBvZiBhbGxGZWVkcyl7XG5cdFx0XHRcdGV4cGVjdChmZWVkLnVybCkudG9CZURlZmluZWQoKTtcblx0XHRcdFx0ZXhwZWN0KGZlZWQudXJsLmxlbmd0aCkubm90LnRvQmUoMCk7XG5cdFx0XHR9XG5cdH0pO1xuXG5cdFx0LyogVE9ETzogV3JpdGUgYSB0ZXN0IHRoYXQgbG9vcHMgdGhyb3VnaCBlYWNoIGZlZWRcblx0XHQgKiBpbiB0aGUgYWxsRmVlZHMgb2JqZWN0IGFuZCBlbnN1cmVzIGl0IGhhcyBhIG5hbWUgZGVmaW5lZFxuXHRcdCAqIGFuZCB0aGF0IHRoZSBuYW1lIGlzIG5vdCBlbXB0eS5cblx0XHQgKi9cblx0XHRpdCgnQSBuYW1lIGRlZmluZWQnLCBmdW5jdGlvbigpe1xuXHRcdFx0Zm9yKGZlZWQgb2YgYWxsRmVlZHMpe1xuXHRcdFx0XHRleHBlY3QoZmVlZC5uYW1lKS50b0JlRGVmaW5lZCgpO1xuXHRcdFx0XHRleHBlY3QoZmVlZC5uYW1lLmxlbmd0aCkubm90LnRvQmUoMCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xuXG5cblx0LyogVE9ETzogV3JpdGUgYSBuZXcgdGVzdCBzdWl0ZSBuYW1lZCBcIlRoZSBtZW51XCIgKi9cblx0XG5cdGRlc2NyaWJlKFwiVGhlIG1lbnVcIiAsIGZ1bmN0aW9uKCl7XG5cdFx0LyogVE9ETzogV3JpdGUgYSB0ZXN0IHRoYXQgZW5zdXJlcyB0aGUgbWVudSBlbGVtZW50IGlzXG5cdFx0ICogaGlkZGVuIGJ5IGRlZmF1bHQuIFlvdSdsbCBoYXZlIHRvIGFuYWx5emUgdGhlIEhUTUwgYW5kXG5cdFx0ICogdGhlIENTUyB0byBkZXRlcm1pbmUgaG93IHdlJ3JlIHBlcmZvcm1pbmcgdGhlXG5cdFx0ICogaGlkaW5nL3Nob3dpbmcgb2YgdGhlIG1lbnUgZWxlbWVudC5cblx0XHQgKi9cblx0XHRpdChcIklzIGhpZGRlblwiLCBmdW5jdGlvbigpe1xuXHRcdFx0Y29uc3QgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpO1xuXHRcdFx0ZXhwZWN0KGJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKFwibWVudS1oaWRkZW5cIikpLnRvQmUodHJ1ZSk7XG5cdFx0fSk7XG5cblx0XHQvKiBUT0RPOiBXcml0ZSBhIHRlc3QgdGhhdCBlbnN1cmVzIHRoZSBtZW51IGNoYW5nZXNcblx0XHRcdCogdmlzaWJpbGl0eSB3aGVuIHRoZSBtZW51IGljb24gaXMgY2xpY2tlZC4gVGhpcyB0ZXN0XG5cdFx0XHQqIHNob3VsZCBoYXZlIHR3byBleHBlY3RhdGlvbnM6IGRvZXMgdGhlIG1lbnUgZGlzcGxheSB3aGVuXG5cdFx0XHQqIGNsaWNrZWQgYW5kIGRvZXMgaXQgaGlkZSB3aGVuIGNsaWNrZWQgYWdhaW4uXG5cdFx0XHQqL1xuXHRcdFx0aXQoXCJUb2dnbGUgb24gYW5kIG9mZlwiLCBmdW5jdGlvbigpe1xuXHRcdFx0XHRjb25zdCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIik7XG5cdFx0XHRcdGNvbnN0IG1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1lbnUtaWNvbi1saW5rXCIpO1xuXHRcdFx0XHRcblx0XHRcdFx0bWVudS5jbGljaygpO1xuXHRcdFx0XHRleHBlY3QoYm9keS5jbGFzc0xpc3QuY29udGFpbnMoXCJtZW51LWhpZGRlblwiKSkudG9CZShmYWxzZSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRtZW51LmNsaWNrKCk7XG5cdFx0XHRcdGV4cGVjdChib2R5LmNsYXNzTGlzdC5jb250YWlucyhcIm1lbnUtaGlkZGVuXCIpKS50b0JlKHRydWUpO1xuXHRcdFx0fSk7XG5cdH0pO1xuXG5cdC8qIFRPRE86IFdyaXRlIGEgbmV3IHRlc3Qgc3VpdGUgbmFtZWQgXCJJbml0aWFsIEVudHJpZXNcIiAqL1xuXHRkZXNjcmliZSgnSW5pdGlhbCBFbnRyaWVzJyAsZnVuY3Rpb24oKXtcblx0XHQvKiBUT0RPOiBXcml0ZSBhIHRlc3QgdGhhdCBlbnN1cmVzIHdoZW4gdGhlIGxvYWRGZWVkXG5cdFx0ICogZnVuY3Rpb24gaXMgY2FsbGVkIGFuZCBjb21wbGV0ZXMgaXRzIHdvcmssIHRoZXJlIGlzIGF0IGxlYXN0XG5cdFx0ICogYSBzaW5nbGUgLmVudHJ5IGVsZW1lbnQgd2l0aGluIHRoZSAuZmVlZCBjb250YWluZXIuXG5cdFx0ICogUmVtZW1iZXIsIGxvYWRGZWVkKCkgaXMgYXN5bmNocm9ub3VzIHNvIHRoaXMgdGVzdCB3aWxsIHJlcXVpcmVcblx0XHQgKiB0aGUgdXNlIG9mIEphc21pbmUncyBiZWZvcmVFYWNoIGFuZCBhc3luY2hyb25vdXMgZG9uZSgpIGZ1bmN0aW9uLlxuXHRcdCAqL1xuXHRcdGJlZm9yZUVhY2goZnVuY3Rpb24oZG9uZSl7XG5cdFx0XHRsb2FkRmVlZCgwICxkb25lKTtcblx0XHR9KTtcblx0XHRpdCgnY29tcGxldGVzIHdvcmsnLCBmdW5jdGlvbigpe1xuXHRcdFx0Y29uc3QgZmVlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZmVlZFwiKTtcblx0XHRcdGV4cGVjdChmZWVkLmNoaWxkcmVuLmxlbmd0aCA+IDApLnRvQmUodHJ1ZSlcblx0XHR9KTtcblx0fSk7XG5cdFxuXHQvKiBUT0RPOiBXcml0ZSBhIG5ldyB0ZXN0IHN1aXRlIG5hbWVkIFwiTmV3IEZlZWQgU2VsZWN0aW9uXCIgKi9cblx0ZGVzY3JpYmUoJ05ldyBGZWVkIFNlbGVjdGlvbicsIGZ1bmN0aW9uKCl7XG5cdFx0LyogVE9ETzogV3JpdGUgYSB0ZXN0IHRoYXQgZW5zdXJlcyB3aGVuIGEgbmV3IGZlZWQgaXMgbG9hZGVkXG5cdFx0ICogYnkgdGhlIGxvYWRGZWVkIGZ1bmN0aW9uIHRoYXQgdGhlIGNvbnRlbnQgYWN0dWFsbHkgY2hhbmdlcy5cblx0XHQgKiBSZW1lbWJlciwgbG9hZEZlZWQoKSBpcyBhc3luY2hyb25vdXMuXG5cdCAgKi9cblx0XHRjb25zdCBmZWVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5mZWVkXCIpO1xuXHRcdGNvbnN0IGZpcnN0RmVlZCA9IFtdO1xuXHRcdGJlZm9yZUVhY2goZnVuY3Rpb24oZG9uZSl7XG5cdFx0XHRsb2FkRmVlZCgwKTtcblx0XHRcdEFycmF5LmZyb20oZmVlZC5jaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbihlbnRyeSl7XG5cdFx0XHRcdGZpcnN0RmVlZC5wdXNoKGVudHJ5LmlubmVyVGV4dCk7XG5cdFx0XHR9KTtcblx0XHRcdGxvYWRGZWVkKDEgLGRvbmUpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdGl0KCdDb250ZW50IENoYW5nZXMnLCBmdW5jdGlvbigpe1xuXHRcdFxuXHRcdFx0QXJyYXkuZnJvbShmZWVkLmNoaWxkcmVuKS5mb3JFYWNoKGZ1bmN0aW9uKGVudHJ5LGluZGV4KXtcblx0XHRcdFx0Y29uc29sZS5sb2coZW50cnkuaW5uZXJUZXh0LCBmaXJzdEZlZWRbaW5kZXhdLCBlbnRyeS5pbm5lclRleHQgPT09IGZpcnN0RmVlZFtpbmRleF0pO1xuXHRcdFx0XHRleHBlY3QoZW50cnkuaW5uZXJUZXh0ID09PSBmaXJzdEZlZWRbaW5kZXhdKS50b0JlKGZhbHNlKTtcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0fSk7XG5cdH0pO1xuXG5cdFx0XHRcdFxufSgpKTtcbiJdfQ==
