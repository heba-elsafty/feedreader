$((describe("RSS Feeds",function(){it("are defined",function(){expect(allFeeds).toBeDefined(),expect(allFeeds.length).not.toBe(0)}),it("URL defined",function(){for(feed of allFeeds)expect(feed.url).toBeDefined(),expect(feed.url.length).not.toBe(0)}),it("A name defined",function(){for(feed of allFeeds)expect(feed.name).toBeDefined(),expect(feed.name.length).not.toBe(0)})}),describe("The menu",function(){it("Is hidden",function(){const e=document.querySelector("body");expect(e.classList.contains("menu-hidden")).toBe(!0)}),it("Toggle on and off",function(){const e=document.querySelector("body"),n=document.querySelector(".menu-icon-link");n.click(),expect(e.classList.contains("menu-hidden")).toBe(!1),n.click(),expect(e.classList.contains("menu-hidden")).toBe(!0)})}),describe("Initial Entries",function(){beforeEach(function(e){loadFeed(0,e)}),it("completes work",function(){const e=document.querySelector(".feed");expect(e.children.length>0).toBe(!0)})}),void describe("New Feed Selection",function(){const e=document.querySelector(".feed"),n=[];beforeEach(function(t){loadFeed(0),Array.from(e.children).forEach(function(e){n.push(e.innerText)}),loadFeed(1,t)}),it("Content Changes",function(){Array.from(e.children).forEach(function(e,t){console.log(e.innerText,n[t],e.innerText===n[t]),expect(e.innerText===n[t]).toBe(!1)})})})));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
